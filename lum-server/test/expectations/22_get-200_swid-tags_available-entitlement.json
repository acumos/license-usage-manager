{
    "db": [
        {
            "sqlCmd": "WITH sw_lp AS ( SELECT swt.*, COALESCE(($3)::TEXT = ANY (swt.\"swCreators\"), FALSE) AS \"isUsedBySwCreator\", lp.\"licenseProfileRevision\", lp.\"licenseProfileActive\", lp.\"closureReason\" AS lp_closure_reason, lp.\"isRtuRequired\", COALESCE(swt.\"swidTagActive\" = TRUE AND lp.\"licenseProfileActive\" = TRUE AND lp.\"isRtuRequired\" = TRUE AND COALESCE(($3)::TEXT = ANY (swt.\"swCreators\"), FALSE) = FALSE, FALSE) AS need_rtu FROM \"swidTag\" AS swt LEFT OUTER JOIN LATERAL (SELECT l_p.* FROM \"licenseProfile\" AS l_p WHERE l_p.\"licenseProfileId\" = swt.\"licenseProfileId\" ) AS lp ON TRUE ) , swid_tag AS ( SELECT sw_lp.*, CASE WHEN sw_lp.\"isUsedBySwCreator\" = TRUE  THEN 'bySwCreator' WHEN sw_lp.\"isRtuRequired\"     = FALSE THEN 'freeToUse' WHEN sw_lp.need_rtu            = TRUE  THEN 'rightToUse' ELSE NULL END AS \"usageType\", CASE WHEN sw_lp.\"swidTagActive\" = FALSE THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_swidTagRevoked', 'denialType', 'swidTagRevoked', 'denialReason', FORMAT('swid-tag(%s) %s', sw_lp.\"swTagId\", COALESCE(sw_lp.\"closureReason\", 'revoked')), 'deniedAction', ($1)::TEXT, 'denialReqItemName', 'swTagId', 'denialReqItemValue', sw_lp.\"swTagId\" ) WHEN sw_lp.\"licenseProfileRevision\" IS NULL THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_licenseProfileNotFound', 'denialType', 'licenseProfileNotFound', 'denialReason', FORMAT('license-profile(%s) not found for swid-tag(%s)', sw_lp.\"licenseProfileId\", sw_lp.\"swTagId\"), 'deniedAction', ($1)::TEXT, 'denialReqItemName', 'licenseProfileId', 'denialReqItemValue', sw_lp.\"licenseProfileId\" ) WHEN sw_lp.\"licenseProfileActive\" = FALSE THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_licenseProfileRevoked', 'denialType', 'licenseProfileRevoked', 'denialReason', FORMAT('license-profile(%s) %s for swid-tag(%s)', sw_lp.\"licenseProfileId\", COALESCE(sw_lp.lp_closure_reason, 'revoked'), sw_lp.\"swTagId\"), 'deniedAction', ($1)::TEXT, 'denialReqItemName', 'licenseProfileId', 'denialReqItemValue', sw_lp.\"licenseProfileId\" ) ELSE NULL END AS \"denial\" FROM sw_lp ) , swt_ctlg AS ( SELECT stag.\"swTagId\", ARRAY_AGG(DISTINCT ctlg.\"swCatalogId\")   AS \"swCatalogIds\", ARRAY_AGG(DISTINCT ctlg.\"swCatalogType\") AS \"swCatalogTypes\" FROM (SELECT \"swTagId\", \"swCatalogs\" FROM swid_tag WHERE swid_tag.need_rtu = TRUE) AS stag CROSS JOIN LATERAL JSONB_TO_RECORDSET(stag.\"swCatalogs\") AS ctlg(\"swCatalogId\" TEXT, \"swCatalogType\" TEXT) GROUP BY stag.\"swTagId\") , rtu_rule AS ( SELECT DISTINCT ON (swid_tag.\"swTagId\") swid_tag.\"swTagId\" AS rtu_sw_id, rtu.\"assetUsageRuleId\", rtu.\"assetUsageAgreementId\", agr.\"assetUsageAgreementRevision\", rtu.\"rightToUseId\", rtu.\"assetUsageRuleType\", rtu.\"rightToUseRevision\", rtu.\"metricsRevision\", rtu.\"licenseKeys\", \"rtuAction\", usmcs.\"metrics\", rtu.\"assigneeMetrics\", (rtu.\"assigneeMetrics\"->'users')::JSONB ? ($3)::TEXT AS \"isUserInAssigneeMetrics\" FROM swid_tag JOIN \"rightToUse\" AS rtu ON (rtu.\"softwareLicensorId\" = swid_tag.\"softwareLicensorId\") JOIN \"assetUsageAgreement\" AS agr ON (rtu.\"softwareLicensorId\" = agr.\"softwareLicensorId\" AND rtu.\"assetUsageAgreementId\" = agr.\"assetUsageAgreementId\") CROSS JOIN LATERAL JSON_ARRAY_ELEMENTS_TEXT(ARRAY_TO_JSON(rtu.\"actions\")) AS \"rtuAction\" LEFT OUTER JOIN LATERAL (SELECT ums.* FROM \"usageMetrics\" AS ums WHERE ums.\"usageMetricsId\" = rtu.\"assetUsageRuleId\" AND ums.\"action\" = \"rtuAction\" AND ums.\"usageType\" = 'rightToUse' ) AS usmcs ON TRUE LEFT OUTER JOIN LATERAL (SELECT swt_ctlg.\"swCatalogIds\", swt_ctlg.\"swCatalogTypes\" FROM swt_ctlg WHERE swt_ctlg.\"swTagId\" = swid_tag.\"swTagId\") AS ctlgs ON TRUE WHERE \"rtuAction\" IN (($1),($2)) AND rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swPersistentId\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') ? (swid_tag.\"swPersistentId\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lt' THEN (swid_tag.\"swPersistentId\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lteq' THEN (swid_tag.\"swPersistentId\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'eq' THEN (swid_tag.\"swPersistentId\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'gteq' THEN (swid_tag.\"swPersistentId\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'gt' THEN (swid_tag.\"swPersistentId\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT ELSE FALSE END) AND (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swTagId\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') ? (swid_tag.\"swTagId\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lt' THEN (swid_tag.\"swTagId\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lteq' THEN (swid_tag.\"swTagId\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'eq' THEN (swid_tag.\"swTagId\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'gteq' THEN (swid_tag.\"swTagId\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'gt' THEN (swid_tag.\"swTagId\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT ELSE FALSE END) AND (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swProductName\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') ? (swid_tag.\"swProductName\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lt' THEN (swid_tag.\"swProductName\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lteq' THEN (swid_tag.\"swProductName\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'eq' THEN (swid_tag.\"swProductName\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'gteq' THEN (swid_tag.\"swProductName\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'gt' THEN (swid_tag.\"swProductName\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT ELSE FALSE END) AND (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swCategory\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') ? (swid_tag.\"swCategory\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lt' THEN (swid_tag.\"swCategory\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lteq' THEN (swid_tag.\"swCategory\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'eq' THEN (swid_tag.\"swCategory\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'gteq' THEN (swid_tag.\"swCategory\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'gt' THEN (swid_tag.\"swCategory\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT ELSE FALSE END) AND (rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}' IS NULL OR (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}') = 'array' AND rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}' ?| ctlgs.\"swCatalogIds\")) AND (rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}' IS NULL OR (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}') = 'array' AND rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}' ?| ctlgs.\"swCatalogTypes\")) AND ((rtu.\"assigneeMetrics\"->'users')::JSONB ? ($3)::TEXT OR (CASE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') IS NULL OR (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}') IS NULL THEN TRUE WHEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1) IS NULL OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') = 'array' AND (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') ? (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::TEXT WHEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') <> 'number' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lt' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER < (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lteq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER <= (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'eq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER = (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'gteq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER >= (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'gt' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER > (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER ELSE FALSE END)) AND (CASE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') IS NULL OR (rtu.\"assigneeRefinement\"#>'{lum:users,operator}') IS NULL THEN TRUE WHEN (($3)::TEXT) IS NULL OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,operator}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') = 'array' AND (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') ? (($3)::TEXT)::TEXT WHEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lt' THEN (($3)::TEXT)::TEXT < (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lteq' THEN (($3)::TEXT)::TEXT <= (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'eq' THEN (($3)::TEXT)::TEXT = (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'gteq' THEN (($3)::TEXT)::TEXT >= (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'gt' THEN (($3)::TEXT)::TEXT > (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT ELSE FALSE END) AND (CASE WHEN (rtu.\"usageConstraints\"#>'{count,rightOperand}') IS NULL OR (rtu.\"usageConstraints\"#>'{count,operator}') IS NULL THEN TRUE WHEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($4)) IS NULL OR JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,operator}') <> 'string' THEN FALSE WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') = 'array' AND (rtu.\"usageConstraints\"#>'{count,rightOperand}') ? (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($4))::TEXT WHEN JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') <> 'number' THEN FALSE WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lt' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($4))::INTEGER < (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lteq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($4))::INTEGER <= (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'eq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($4))::INTEGER = (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'gteq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($4))::INTEGER >= (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'gt' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($4))::INTEGER > (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER ELSE FALSE END) ORDER BY swid_tag.\"swTagId\", NULLIF(rtu.\"assetUsageRuleType\", 'prohibition') NULLS FIRST, NULLIF(\"rtuAction\", 'use') NULLS LAST, rtu.\"created\", rtu.\"assetUsageRuleId\" ) , swid_tag_entitlement AS ( SELECT swid_tag.\"softwareLicensorId\", swid_tag.\"swTagId\", swid_tag.\"swidTagRevision\", swid_tag.\"swPersistentId\", swid_tag.\"swVersion\", swid_tag.\"swProductName\", swid_tag.\"licenseProfileId\", swid_tag.\"licenseProfileRevision\", swid_tag.\"isUsedBySwCreator\", swid_tag.\"isRtuRequired\", swid_tag.\"usageType\", swid_tag.need_rtu, CASE WHEN swid_tag.\"denial\" IS NOT NULL THEN swid_tag.\"denial\" WHEN swid_tag.need_rtu = FALSE THEN NULL WHEN rtu_rule.\"assetUsageRuleType\" = 'prohibition' THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_usageProhibited', 'denialType', 'usageProhibited', 'denialReason', FORMAT('swid-tag(%s) has been found but asset-usage is prohibited by prohibition(%s) under asset-usage-agreement(%s) for action(%s)', swid_tag.\"swTagId\", rtu_rule.\"rightToUseId\", rtu_rule.\"assetUsageAgreementId\", rtu_rule.\"rtuAction\"), 'deniedAction', rtu_rule.\"rtuAction\", 'deniedAssetUsageAgreementId', rtu_rule.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', rtu_rule.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu_rule.\"rightToUseId\", 'deniedRightToUseRevision', rtu_rule.\"rightToUseRevision\", 'denialReqItemName', 'action', 'denialReqItemValue', ($1)::TEXT, 'deniedConstraint', JSON_BUILD_OBJECT('action', rtu_rule.\"rtuAction\") ) ELSE NULL END AS \"denial\", rtu_rule.* FROM swid_tag LEFT OUTER JOIN rtu_rule ON (swid_tag.\"swTagId\" = rtu_rule.rtu_sw_id) ) SELECT \"softwareLicensorId\", \"swTagId\", \"swidTagRevision\", \"swPersistentId\", \"swVersion\", \"swProductName\", \"licenseProfileId\", \"licenseProfileRevision\", \"isUsedBySwCreator\", \"isRtuRequired\", CASE WHEN \"denial\" IS NULL AND swtags_ent.need_rtu = TRUE AND swtags_ent.rtu_sw_id IS NOT NULL THEN JSON_BUILD_OBJECT( 'rightToUseId', swtags_ent.\"rightToUseId\", 'rightToUseRevision', swtags_ent.\"rightToUseRevision\", 'assetUsageAgreementId', swtags_ent.\"assetUsageAgreementId\", 'assetUsageAgreementRevision', swtags_ent.\"assetUsageAgreementRevision\", 'licenseKeys', swtags_ent.\"licenseKeys\" ) ELSE NULL END AS \"availableEntitlement\" FROM swid_tag_entitlement AS swtags_ent WHERE swtags_ent.\"denial\" IS NULL AND (swtags_ent.need_rtu = FALSE OR swtags_ent.rtu_sw_id IS NOT NULL) ORDER BY swtags_ent.\"softwareLicensorId\", swtags_ent.\"swTagId\"",
            "sqlVals": [
                "acumos:deploy",
                "use",
                "unit-test-userId",
                1
            ],
            "result": {
                "command": "SELECT",
                "rowCount": 1,
                "rows": [
                    {
                        "softwareLicensorId": "unit-test-softwareLicensorId",
                        "swTagId": "unit-test-swTagId",
                        "swidTagRevision": 5,
                        "swPersistentId": "a218c795-ae2c-4ff9-894d-462baa768dfc",
                        "swVersion": "4",
                        "swProductName": "unit-test-product253",
                        "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                        "licenseProfileRevision": 1,
                        "isUsedBySwCreator": false,
                        "isRtuRequired": true,
                        "availableEntitlement": {
                            "rightToUseId": "unit-test-permission-1",
                            "rightToUseRevision": 10,
                            "assetUsageAgreementId": "unit-test-assetUsageAgreementId",
                            "assetUsageAgreementRevision": 10,
                            "licenseKeys": null
                        }
                    }
                ]
            }
        }
    ],
    "req": {
        "method": "GET",
        "path": "/api/v1/swid-tags/available-entitlement?userId=unit-test-userId&action=acumos%3Adeploy",
        "X-ACUMOS-RequestID": "4f226aa7-1a64-4df9-a1fd-dad7b3756755",
        "send": {
            "requestId": "4f226aa7-1a64-4df9-a1fd-dad7b3756755",
            "requested": "2020-06-25T17:44:13.341Z"
        }
    },
    "res": {
        "statusCode": 200,
        "bodySubsetKeys": [
            {
                "field": "swidTagsWithAvailableEntitlement",
                "key": "swTagId",
                "value": "unit-test-swTagId"
            }
        ],
        "bodySubset": {
            "swidTagsWithAvailableEntitlement": [
                {
                    "softwareLicensorId": "unit-test-softwareLicensorId",
                    "swTagId": "unit-test-swTagId",
                    "swidTagRevision": 5,
                    "swPersistentId": "a218c795-ae2c-4ff9-894d-462baa768dfc",
                    "swVersion": "4",
                    "swProductName": "unit-test-product253",
                    "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                    "licenseProfileRevision": 1,
                    "isUsedBySwCreator": false,
                    "isRtuRequired": true,
                    "availableEntitlement": {
                        "rightToUseId": "unit-test-permission-1",
                        "rightToUseRevision": 10,
                        "assetUsageAgreementId": "unit-test-assetUsageAgreementId",
                        "assetUsageAgreementRevision": 10,
                        "licenseKeys": null
                    }
                }
            ]
        },
        "body": {
            "userId": "unit-test-userId",
            "requestId": "4f226aa7-1a64-4df9-a1fd-dad7b3756755",
            "requested": "__type__dateTime__",
            "action": "acumos:deploy"
        }
    }
}