{
    "db": [
        {
            "sqlCmd": "BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ",
            "result": {
                "command": "BEGIN",
                "rowCount": 1,
                "rows": []
            }
        },
        {
            "sqlCmd": "SELECT TXID_CURRENT() AS txid, PG_BACKEND_PID() AS pid, NOW() AS tx_now",
            "result": {
                "command": "SELECT",
                "rowCount": 1,
                "rows": [
                    {
                        "txid": 123,
                        "pid": 456,
                        "tx_now": "__to_date__|2019-12-19T11:43:20.952Z"
                    }
                ]
            }
        },
        {
            "sqlCmd": "INSERT INTO \"assetUsageReq\" (\"assetUsageReqId\" , \"action\",\"assetUsageType\",\"requestHttp\",\"request\",\"userId\",\"status\", \"requestStarted\") VALUES (($1) , ($2),($3),($4),($5),($6),($7), NOW())",
            "sqlVals": [
                "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
                "acumos:deploy",
                "assetUsage",
                {
                    "method": "PUT",
                    "requestUrl": "__type__ignore__",
                    "serverFQDN": "__type__ignore__",
                    "path": "/api/v1/asset-usage",
                    "originalUrl": "/api/v1/asset-usage?assetUsageId=unit-test-assetUsageId",
                    "query": {
                        "assetUsageId": "unit-test-assetUsageId"
                    },
                    "Content-Type": "application/json; charset=utf-8",
                    "X-ACUMOS-RequestID": "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
                    "userAgent": "__type__ignore__",
                    "clientIPAddress": "__type__ignore__",
                    "ips": []
                },
                {
                    "userId": "unit-test-userId",
                    "swMgtSystemId": "unit-test-swMgtSystemId",
                    "swMgtSystemInstanceId": "unit-test-swMgtSystemInstanceId",
                    "swMgtSystemComponent": "unit-test-swMgtSystemComponent",
                    "assetUsageReq": {
                        "swTagId": "unit-test-swTagId",
                        "assetUsageId": "unit-test-assetUsageId",
                        "action": "acumos:deploy",
                        "isIncludedAsset": false,
                        "includedAssetUsage": [
                            {
                                "includedSwTagId": "unit-test-swTagId",
                                "includedAssetUsageId": "unit-test-assetUsageId-2"
                            }
                        ]
                    }
                },
                "unit-test-userId",
                "started"
            ],
            "result": {
                "command": "INSERT",
                "rowCount": 1,
                "rows": []
            }
        },
        {
            "sqlCmd": "WITH sw_lp AS ( SELECT swt.*, COALESCE(($4)::TEXT = ANY (swt.\"swCreators\"), FALSE) AS \"isUsedBySwCreator\", lp.\"licenseProfileRevision\", lp.\"licenseProfileActive\", lp.\"closureReason\" AS lp_closure_reason, lp.\"isRtuRequired\", COALESCE(swt.\"swidTagActive\" = TRUE AND lp.\"licenseProfileActive\" = TRUE AND lp.\"isRtuRequired\" = TRUE AND COALESCE(($4)::TEXT = ANY (swt.\"swCreators\"), FALSE) = FALSE, FALSE) AS need_rtu FROM \"swidTag\" AS swt LEFT OUTER JOIN LATERAL (SELECT l_p.* FROM \"licenseProfile\" AS l_p WHERE l_p.\"licenseProfileId\" = swt.\"licenseProfileId\" FOR SHARE) AS lp ON TRUE WHERE swt.\"swTagId\" = ($1) FOR SHARE OF swt ) , swid_tag AS ( SELECT sw_lp.*, CASE WHEN sw_lp.\"isUsedBySwCreator\" = TRUE  THEN 'bySwCreator' WHEN sw_lp.\"isRtuRequired\"     = FALSE THEN 'freeToUse' WHEN sw_lp.need_rtu            = TRUE  THEN 'rightToUse' ELSE NULL END AS \"usageType\", CASE WHEN sw_lp.\"swidTagActive\" = FALSE THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_swidTagRevoked', 'denialType', 'swidTagRevoked', 'denialReason', FORMAT('swid-tag(%s) %s', sw_lp.\"swTagId\", COALESCE(sw_lp.\"closureReason\", 'revoked')), 'deniedAction', ($2)::TEXT, 'denialReqItemName', 'swTagId', 'denialReqItemValue', sw_lp.\"swTagId\" ) WHEN sw_lp.\"licenseProfileRevision\" IS NULL THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_licenseProfileNotFound', 'denialType', 'licenseProfileNotFound', 'denialReason', FORMAT('license-profile(%s) not found for swid-tag(%s)', sw_lp.\"licenseProfileId\", sw_lp.\"swTagId\"), 'deniedAction', ($2)::TEXT, 'denialReqItemName', 'licenseProfileId', 'denialReqItemValue', sw_lp.\"licenseProfileId\" ) WHEN sw_lp.\"licenseProfileActive\" = FALSE THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_licenseProfileRevoked', 'denialType', 'licenseProfileRevoked', 'denialReason', FORMAT('license-profile(%s) %s for swid-tag(%s)', sw_lp.\"licenseProfileId\", COALESCE(sw_lp.lp_closure_reason, 'revoked'), sw_lp.\"swTagId\"), 'deniedAction', ($2)::TEXT, 'denialReqItemName', 'licenseProfileId', 'denialReqItemValue', sw_lp.\"licenseProfileId\" ) ELSE NULL END AS \"denial\" FROM sw_lp ) , swt_ctlg AS ( SELECT stag.\"swTagId\", ARRAY_AGG(DISTINCT ctlg.\"swCatalogId\")   AS \"swCatalogIds\", ARRAY_AGG(DISTINCT ctlg.\"swCatalogType\") AS \"swCatalogTypes\" FROM (SELECT \"swTagId\", \"swCatalogs\" FROM swid_tag WHERE swid_tag.need_rtu = TRUE) AS stag CROSS JOIN LATERAL JSONB_TO_RECORDSET(stag.\"swCatalogs\") AS ctlg(\"swCatalogId\" TEXT, \"swCatalogType\" TEXT) GROUP BY stag.\"swTagId\") , rtu_rule AS ( SELECT  swid_tag.\"swTagId\" AS rtu_sw_id, rtu.\"assetUsageRuleId\", rtu.\"assetUsageAgreementId\", agr.\"assetUsageAgreementRevision\", rtu.\"rightToUseId\", rtu.\"assetUsageRuleType\", rtu.\"rightToUseRevision\", rtu.\"metricsRevision\", rtu.\"licenseKeys\", \"rtuAction\", usmcs.\"metrics\", rtu.\"assigneeMetrics\", (rtu.\"assigneeMetrics\"->'users')::JSONB ? ($4)::TEXT AS \"isUserInAssigneeMetrics\" FROM swid_tag JOIN \"rightToUse\" AS rtu ON (rtu.\"softwareLicensorId\" = swid_tag.\"softwareLicensorId\") JOIN \"assetUsageAgreement\" AS agr ON (rtu.\"softwareLicensorId\" = agr.\"softwareLicensorId\" AND rtu.\"assetUsageAgreementId\" = agr.\"assetUsageAgreementId\") CROSS JOIN LATERAL JSON_ARRAY_ELEMENTS_TEXT(ARRAY_TO_JSON(rtu.\"actions\")) AS \"rtuAction\" LEFT OUTER JOIN LATERAL (SELECT ums.* FROM \"usageMetrics\" AS ums WHERE ums.\"usageMetricsId\" = rtu.\"assetUsageRuleId\" AND ums.\"action\" = \"rtuAction\" AND ums.\"usageType\" = 'rightToUse' FOR UPDATE) AS usmcs ON TRUE LEFT OUTER JOIN LATERAL (SELECT swt_ctlg.\"swCatalogIds\", swt_ctlg.\"swCatalogTypes\" FROM swt_ctlg WHERE swt_ctlg.\"swTagId\" = swid_tag.\"swTagId\") AS ctlgs ON TRUE WHERE \"rtuAction\" IN (($2),($3)) AND rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swPersistentId\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') ? (swid_tag.\"swPersistentId\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lt' THEN (swid_tag.\"swPersistentId\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lteq' THEN (swid_tag.\"swPersistentId\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'eq' THEN (swid_tag.\"swPersistentId\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'gteq' THEN (swid_tag.\"swPersistentId\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'gt' THEN (swid_tag.\"swPersistentId\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT ELSE FALSE END) AND (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swTagId\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') ? (swid_tag.\"swTagId\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lt' THEN (swid_tag.\"swTagId\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lteq' THEN (swid_tag.\"swTagId\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'eq' THEN (swid_tag.\"swTagId\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'gteq' THEN (swid_tag.\"swTagId\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'gt' THEN (swid_tag.\"swTagId\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT ELSE FALSE END) AND (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swProductName\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') ? (swid_tag.\"swProductName\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lt' THEN (swid_tag.\"swProductName\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lteq' THEN (swid_tag.\"swProductName\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'eq' THEN (swid_tag.\"swProductName\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'gteq' THEN (swid_tag.\"swProductName\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'gt' THEN (swid_tag.\"swProductName\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT ELSE FALSE END) AND (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swCategory\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') ? (swid_tag.\"swCategory\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lt' THEN (swid_tag.\"swCategory\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lteq' THEN (swid_tag.\"swCategory\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'eq' THEN (swid_tag.\"swCategory\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'gteq' THEN (swid_tag.\"swCategory\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'gt' THEN (swid_tag.\"swCategory\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT ELSE FALSE END) AND (rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}' IS NULL OR (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}') = 'array' AND rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}' ?| ctlgs.\"swCatalogIds\")) AND (rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}' IS NULL OR (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}') = 'array' AND rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}' ?| ctlgs.\"swCatalogTypes\")) AND ((rtu.\"assigneeMetrics\"->'users')::JSONB ? ($4)::TEXT OR (CASE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') IS NULL OR (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}') IS NULL THEN TRUE WHEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1) IS NULL OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') = 'array' AND (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') ? (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::TEXT WHEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') <> 'number' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lt' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER < (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lteq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER <= (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'eq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER = (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'gteq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER >= (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'gt' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER > (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER ELSE FALSE END)) AND (CASE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') IS NULL OR (rtu.\"assigneeRefinement\"#>'{lum:users,operator}') IS NULL THEN TRUE WHEN (($4)::TEXT) IS NULL OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,operator}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') = 'array' AND (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') ? (($4)::TEXT)::TEXT WHEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lt' THEN (($4)::TEXT)::TEXT < (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lteq' THEN (($4)::TEXT)::TEXT <= (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'eq' THEN (($4)::TEXT)::TEXT = (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'gteq' THEN (($4)::TEXT)::TEXT >= (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'gt' THEN (($4)::TEXT)::TEXT > (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT ELSE FALSE END) AND (CASE WHEN (rtu.\"usageConstraints\"#>'{count,rightOperand}') IS NULL OR (rtu.\"usageConstraints\"#>'{count,operator}') IS NULL THEN TRUE WHEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5)) IS NULL OR JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,operator}') <> 'string' THEN FALSE WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') = 'array' AND (rtu.\"usageConstraints\"#>'{count,rightOperand}') ? (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::TEXT WHEN JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') <> 'number' THEN FALSE WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lt' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER < (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lteq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER <= (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'eq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER = (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'gteq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER >= (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'gt' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER > (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER ELSE FALSE END) ORDER BY swid_tag.\"swTagId\", NULLIF(rtu.\"assetUsageRuleType\", 'prohibition') NULLS FIRST, NULLIF(\"rtuAction\", 'use') NULLS LAST, rtu.\"created\", rtu.\"assetUsageRuleId\" LIMIT 1 FOR UPDATE OF rtu) , swid_tag_entitlement AS ( SELECT swid_tag.\"softwareLicensorId\", swid_tag.\"swTagId\", swid_tag.\"swidTagRevision\", swid_tag.\"swPersistentId\", swid_tag.\"swVersion\", swid_tag.\"swProductName\", swid_tag.\"licenseProfileId\", swid_tag.\"licenseProfileRevision\", swid_tag.\"isUsedBySwCreator\", swid_tag.\"isRtuRequired\", swid_tag.\"usageType\", swid_tag.need_rtu, CASE WHEN swid_tag.\"denial\" IS NOT NULL THEN swid_tag.\"denial\" WHEN swid_tag.need_rtu = FALSE THEN NULL WHEN rtu_rule.\"assetUsageRuleType\" = 'prohibition' THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_usageProhibited', 'denialType', 'usageProhibited', 'denialReason', FORMAT('swid-tag(%s) has been found but asset-usage is prohibited by prohibition(%s) under asset-usage-agreement(%s) for action(%s)', swid_tag.\"swTagId\", rtu_rule.\"rightToUseId\", rtu_rule.\"assetUsageAgreementId\", rtu_rule.\"rtuAction\"), 'deniedAction', rtu_rule.\"rtuAction\", 'deniedAssetUsageAgreementId', rtu_rule.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', rtu_rule.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu_rule.\"rightToUseId\", 'deniedRightToUseRevision', rtu_rule.\"rightToUseRevision\", 'denialReqItemName', 'action', 'denialReqItemValue', ($2)::TEXT, 'deniedConstraint', JSON_BUILD_OBJECT('action', rtu_rule.\"rtuAction\") ) ELSE NULL END AS \"denial\", rtu_rule.* FROM swid_tag LEFT OUTER JOIN rtu_rule ON (swid_tag.\"swTagId\" = rtu_rule.rtu_sw_id) ) SELECT \"softwareLicensorId\", \"swTagId\", \"swidTagRevision\", \"swPersistentId\", \"swVersion\", \"swProductName\", \"licenseProfileId\", \"licenseProfileRevision\", \"isUsedBySwCreator\", \"isRtuRequired\", \"assetUsageRuleId\", \"assetUsageAgreementId\", \"assetUsageAgreementRevision\", \"rightToUseId\", \"assetUsageRuleType\", \"rightToUseRevision\", \"metricsRevision\", \"licenseKeys\", \"rtuAction\", \"metrics\", \"assigneeMetrics\", \"isUserInAssigneeMetrics\", \"denial\", CASE WHEN \"denial\" IS NULL AND swtags_ent.need_rtu = TRUE AND swtags_ent.rtu_sw_id IS NOT NULL THEN JSON_BUILD_OBJECT( 'rightToUseId', swtags_ent.\"rightToUseId\", 'rightToUseRevision', swtags_ent.\"rightToUseRevision\", 'assetUsageAgreementId', swtags_ent.\"assetUsageAgreementId\", 'assetUsageAgreementRevision', swtags_ent.\"assetUsageAgreementRevision\", 'licenseKeys', swtags_ent.\"licenseKeys\" ) ELSE NULL END AS \"entitlement\" FROM swid_tag_entitlement AS swtags_ent",
            "sqlVals": [
                "unit-test-swTagId",
                "acumos:deploy",
                "use",
                "unit-test-userId",
                2
            ],
            "result": {
                "command": "SELECT",
                "rowCount": 1,
                "rows": [
                    {
                        "softwareLicensorId": "unit-test-softwareLicensorId",
                        "swTagId": "unit-test-swTagId",
                        "swidTagRevision": 5,
                        "swPersistentId": "a218c795-ae2c-4ff9-894d-462baa768dfc",
                        "swVersion": "4",
                        "swProductName": "unit-test-product253",
                        "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                        "licenseProfileRevision": 1,
                        "isUsedBySwCreator": false,
                        "isRtuRequired": true,
                        "assetUsageRuleId": null,
                        "assetUsageAgreementId": null,
                        "assetUsageAgreementRevision": null,
                        "rightToUseId": null,
                        "assetUsageRuleType": null,
                        "rightToUseRevision": null,
                        "metricsRevision": null,
                        "licenseKeys": null,
                        "rtuAction": null,
                        "metrics": null,
                        "assigneeMetrics": null,
                        "isUserInAssigneeMetrics": null,
                        "denial": null,
                        "entitlement": null
                    }
                ]
            }
        },
        {
            "sqlCmd": "WITH swt_ctlg AS ( SELECT stag.\"swTagId\", ARRAY_AGG(DISTINCT ctlg.\"swCatalogId\") AS \"swCatalogIds\", ARRAY_AGG(DISTINCT ctlg.\"swCatalogType\") AS \"swCatalogTypes\" FROM (SELECT \"swTagId\", \"swCatalogs\" FROM \"swidTag\" WHERE \"swTagId\" = ($1)) AS stag CROSS JOIN LATERAL JSONB_TO_RECORDSET(stag.\"swCatalogs\") AS ctlg(\"swCatalogId\" TEXT, \"swCatalogType\" TEXT) GROUP BY stag.\"swTagId\") SELECT CASE WHEN NOT rtu.\"rightToUseActive\" THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_rightToUseRevoked', 'denialType', 'rightToUseRevoked', 'denialReason', FORMAT( 'rightToUse %s on %s(%s) under agreement(%s) for action(%s)', COALESCE(rtu.\"closureReason\", 'revoked'), rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'rightToUseActive', 'denialReqItemValue', TRUE ) ELSE NULL END AS \"denied_due_rightToUseRevoked\", CASE WHEN rtu.\"rightToUseActive\" AND NOT COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_expireOn', 'denialType', 'timingConstraint', 'denialReason', FORMAT( 'rightToUse expired: (today(%s) > expireOn(%s)) on %s(%s) under agreement(%s) for action(%s)', NOW()::DATE, rtu.\"expireOn\", rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'date', 'denialReqItemValue', NOW()::DATE, 'deniedConstraint', JSON_BUILD_OBJECT('expireOn', rtu.\"expireOn\") ) ELSE NULL END AS \"denied_due_expireOn\", CASE WHEN rtu.\"rightToUseActive\" AND NOT COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_goodFor', 'denialType', 'timingConstraint', 'denialReason', FORMAT( 'rightToUse too late: (now(%s) > end-of-good-for(%s)), usage started(%s), was good for(%s) on %s(%s) under agreement(%s) for action(%s)', TO_CHAR(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'), TO_CHAR(rtu.\"usageEnds\" AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'), TO_CHAR(rtu.\"usageStarted\" AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'), TRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE( TO_CHAR(rtu.\"goodFor\", ' YYYY \"years\" MM \"months\" DD \"days\" HH24 \"hours\" MI \"minutes\" SS.MS \"seconds\"'), ' 0+([1-9]\\d*[.]?\\d*|0[.]\\d*) ', ' \\1 ', 'g'), '\\m0+[.]?0* [a-z]+s\\M', '', 'g'), '[.]-', '.', 'g'), '\\m1 ([a-z]+)s\\M', '1 \\1', 'g'), '  ', ' ', 'g')), rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'datetime', 'denialReqItemValue', TO_CHAR(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'), 'deniedConstraint', JSON_BUILD_OBJECT('leftOperand', 'lum:goodFor', 'operator', 'lteq', 'rightOperand', REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE( TO_CHAR(rtu.\"goodFor\", '\"P\" YYYY \"Y\" MM \"M\" DD \"D\" \"T\" HH24 \"H\" MI \"M\" SS.MS \"S\"'), ' 0+([1-9]\\d* [YMDH]|[1-9]\\d*[.]\\d* S)', ' \\1 ', 'g'), '(\\m0+ [YMDH]|\\m0+[.]000 S|[.]000)\\M', '', 'g'), '(0+|[.]000) S', ' S', 'g'), '[.]-', '.', 'g'), '(\\s+|T\\s+$)', '', 'g')), 'deniedMetrics', JSON_BUILD_OBJECT( 'usageStarted', TO_CHAR(rtu.\"usageStarted\" AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'), 'usageEnded', TO_CHAR(rtu.\"usageEnds\" AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"')) ) ELSE NULL END AS \"denied_due_goodFor\", CASE WHEN rtu.\"rightToUseActive\" AND NOT COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_enableOn', 'denialType', 'timingConstraint', 'denialReason', FORMAT( 'rightToUse not enabled yet: (today(%s) < enableOn(%s)) on %s(%s) under agreement(%s) for action(%s)', NOW()::DATE, rtu.\"enableOn\", rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'date', 'denialReqItemValue', NOW()::DATE, 'deniedConstraint', JSON_BUILD_OBJECT('enableOn', rtu.\"enableOn\") ) ELSE NULL END AS \"denied_due_enableOn\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swPersistentId\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') ? (swid_tag.\"swPersistentId\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lt' THEN (swid_tag.\"swPersistentId\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'lteq' THEN (swid_tag.\"swPersistentId\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'eq' THEN (swid_tag.\"swPersistentId\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'gteq' THEN (swid_tag.\"swPersistentId\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swPersistentId,operator}')->>0 = 'gt' THEN (swid_tag.\"swPersistentId\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}')::TEXT ELSE FALSE END) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_swPersistentIdOnTarget', 'denialType', 'matchingConstraintOnTarget', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') = 'null' THEN FORMAT('invalid constraint %s', (rtu.\"targetRefinement\"#>>'{lum:swPersistentId,rightOperand}')) ELSE FORMAT('not targeted by %s: (%s not %s %s)', (rtu.\"targetRefinement\"#>>'{lum:swPersistentId,leftOperand}'), swid_tag.\"swPersistentId\", (rtu.\"targetRefinement\"#>>'{lum:swPersistentId,operator}'), (rtu.\"targetRefinement\"#>>'{lum:swPersistentId,rightOperand}')) END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'swPersistentId', 'denialReqItemValue', swid_tag.\"swPersistentId\", 'deniedConstraint', rtu.\"targetRefinement\"#>'{lum:swPersistentId}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swPersistentId,rightOperand}') = 'null') ) ELSE NULL END AS \"denied_due_swPersistentIdOnTarget\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swTagId\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') ? (swid_tag.\"swTagId\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lt' THEN (swid_tag.\"swTagId\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'lteq' THEN (swid_tag.\"swTagId\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'eq' THEN (swid_tag.\"swTagId\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'gteq' THEN (swid_tag.\"swTagId\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swTagId,operator}')->>0 = 'gt' THEN (swid_tag.\"swTagId\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}')::TEXT ELSE FALSE END) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_swTagIdOnTarget', 'denialType', 'matchingConstraintOnTarget', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') = 'null' THEN FORMAT('invalid constraint %s', (rtu.\"targetRefinement\"#>>'{lum:swTagId,rightOperand}')) ELSE FORMAT('not targeted by %s: (%s not %s %s)', (rtu.\"targetRefinement\"#>>'{lum:swTagId,leftOperand}'), swid_tag.\"swTagId\", (rtu.\"targetRefinement\"#>>'{lum:swTagId,operator}'), (rtu.\"targetRefinement\"#>>'{lum:swTagId,rightOperand}')) END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'swTagId', 'denialReqItemValue', swid_tag.\"swTagId\", 'deniedConstraint', rtu.\"targetRefinement\"#>'{lum:swTagId}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swTagId,rightOperand}') = 'null') ) ELSE NULL END AS \"denied_due_swTagIdOnTarget\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swProductName\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') ? (swid_tag.\"swProductName\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lt' THEN (swid_tag.\"swProductName\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'lteq' THEN (swid_tag.\"swProductName\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'eq' THEN (swid_tag.\"swProductName\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'gteq' THEN (swid_tag.\"swProductName\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swProductName,operator}')->>0 = 'gt' THEN (swid_tag.\"swProductName\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}')::TEXT ELSE FALSE END) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_swProductNameOnTarget', 'denialType', 'matchingConstraintOnTarget', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') = 'null' THEN FORMAT('invalid constraint %s', (rtu.\"targetRefinement\"#>>'{lum:swProductName,rightOperand}')) ELSE FORMAT('not targeted by %s: (%s not %s %s)', (rtu.\"targetRefinement\"#>>'{lum:swProductName,leftOperand}'), swid_tag.\"swProductName\", (rtu.\"targetRefinement\"#>>'{lum:swProductName,operator}'), (rtu.\"targetRefinement\"#>>'{lum:swProductName,rightOperand}')) END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'swProductName', 'denialReqItemValue', swid_tag.\"swProductName\", 'deniedConstraint', rtu.\"targetRefinement\"#>'{lum:swProductName}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swProductName,rightOperand}') = 'null') ) ELSE NULL END AS \"denied_due_swProductNameOnTarget\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT (CASE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') IS NULL OR (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}') IS NULL THEN TRUE WHEN (swid_tag.\"swCategory\") IS NULL OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,operator}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') = 'array' AND (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') ? (swid_tag.\"swCategory\")::TEXT WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lt' THEN (swid_tag.\"swCategory\")::TEXT < (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'lteq' THEN (swid_tag.\"swCategory\")::TEXT <= (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'eq' THEN (swid_tag.\"swCategory\")::TEXT = (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'gteq' THEN (swid_tag.\"swCategory\")::TEXT >= (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT WHEN (rtu.\"targetRefinement\"#>'{lum:swCategory,operator}')->>0 = 'gt' THEN (swid_tag.\"swCategory\")::TEXT > (rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}')::TEXT ELSE FALSE END) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_swCategoryOnTarget', 'denialType', 'matchingConstraintOnTarget', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') = 'null' THEN FORMAT('invalid constraint %s', (rtu.\"targetRefinement\"#>>'{lum:swCategory,rightOperand}')) ELSE FORMAT('not targeted by %s: (%s not %s %s)', (rtu.\"targetRefinement\"#>>'{lum:swCategory,leftOperand}'), swid_tag.\"swCategory\", (rtu.\"targetRefinement\"#>>'{lum:swCategory,operator}'), (rtu.\"targetRefinement\"#>>'{lum:swCategory,rightOperand}')) END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'swCategory', 'denialReqItemValue', swid_tag.\"swCategory\", 'deniedConstraint', rtu.\"targetRefinement\"#>'{lum:swCategory}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCategory,rightOperand}') = 'null') ) ELSE NULL END AS \"denied_due_swCategoryOnTarget\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT (rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}' IS NULL OR (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}') = 'array' AND rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}' ?| ctlgs.\"swCatalogIds\")) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_swCatalogIdOnTarget', 'denialType', 'matchingConstraintOnTarget', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}') <> 'array' THEN FORMAT('invalid constraint %s', (rtu.\"targetRefinement\"#>>'{lum:swCatalogId,rightOperand}')) ELSE FORMAT('not targeted by %s: (none of %s %s %s)', (rtu.\"targetRefinement\"#>>'{lum:swCatalogId,leftOperand}'), ARRAY_TO_JSON(ctlgs.\"swCatalogIds\"), (rtu.\"targetRefinement\"#>>'{lum:swCatalogId,operator}'), (rtu.\"targetRefinement\"#>>'{lum:swCatalogId,rightOperand}')) END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'swCatalogId', 'denialReqItemValue', ctlgs.\"swCatalogIds\", 'deniedConstraint', rtu.\"targetRefinement\"#>'{lum:swCatalogId}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogId,rightOperand}') <> 'array') ) ELSE NULL END AS \"denied_due_swCatalogIdOnTarget\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT (rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}' IS NULL OR (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}') = 'array' AND rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}' ?| ctlgs.\"swCatalogTypes\")) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_swCatalogTypeOnTarget', 'denialType', 'matchingConstraintOnTarget', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}') <> 'array' THEN FORMAT('invalid constraint %s', (rtu.\"targetRefinement\"#>>'{lum:swCatalogType,rightOperand}')) ELSE FORMAT('not targeted by %s: (none of %s %s %s)', (rtu.\"targetRefinement\"#>>'{lum:swCatalogType,leftOperand}'), ARRAY_TO_JSON(ctlgs.\"swCatalogTypes\"), (rtu.\"targetRefinement\"#>>'{lum:swCatalogType,operator}'), (rtu.\"targetRefinement\"#>>'{lum:swCatalogType,rightOperand}')) END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'swCatalogType', 'denialReqItemValue', ctlgs.\"swCatalogTypes\", 'deniedConstraint', rtu.\"targetRefinement\"#>'{lum:swCatalogType}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"targetRefinement\"#>'{lum:swCatalogType,rightOperand}') <> 'array') ) ELSE NULL END AS \"denied_due_swCatalogTypeOnTarget\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT ((rtu.\"assigneeMetrics\"->'users')::JSONB ? ($4)::TEXT OR (CASE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') IS NULL OR (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}') IS NULL THEN TRUE WHEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1) IS NULL OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') = 'array' AND (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') ? (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::TEXT WHEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') <> 'number' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lt' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER < (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'lteq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER <= (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'eq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER = (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'gteq' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER >= (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER WHEN (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,operator}')->>0 = 'gt' THEN (COALESCE(JSONB_ARRAY_LENGTH((rtu.\"assigneeMetrics\"->'users')::JSONB), 0) + 1)::INTEGER > (rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}')::INTEGER ELSE FALSE END)) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_countUniqueUsersOnAssignee', 'denialType', 'matchingConstraintOnAssignee', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') = 'null' THEN FORMAT('invalid constraint %s', (rtu.\"assigneeRefinement\"#>>'{lum:countUniqueUsers,rightOperand}')) ELSE FORMAT('too many users: (%s not in %s)', ($4)::TEXT, rtu.\"assigneeMetrics\") END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'userId', 'denialReqItemValue', ($4)::TEXT, 'deniedConstraint', rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:countUniqueUsers,rightOperand}') = 'null'), 'deniedMetrics', rtu.\"assigneeMetrics\" ) ELSE NULL END AS \"denied_due_countUniqueUsersOnAssignee\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT (CASE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') IS NULL OR (rtu.\"assigneeRefinement\"#>'{lum:users,operator}') IS NULL THEN TRUE WHEN (($4)::TEXT) IS NULL OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,operator}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') = 'array' AND (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') ? (($4)::TEXT)::TEXT WHEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') <> 'string' THEN FALSE WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lt' THEN (($4)::TEXT)::TEXT < (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'lteq' THEN (($4)::TEXT)::TEXT <= (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'eq' THEN (($4)::TEXT)::TEXT = (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'gteq' THEN (($4)::TEXT)::TEXT >= (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT WHEN (rtu.\"assigneeRefinement\"#>'{lum:users,operator}')->>0 = 'gt' THEN (($4)::TEXT)::TEXT > (rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}')::TEXT ELSE FALSE END) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_usersOnAssignee', 'denialType', 'matchingConstraintOnAssignee', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') = 'null' THEN FORMAT('invalid constraint %s', (rtu.\"assigneeRefinement\"#>>'{lum:users,rightOperand}')) ELSE FORMAT('user not in assignee %s: (%s not %s %s)', (rtu.\"assigneeRefinement\"#>>'{lum:users,leftOperand}'), ($4)::TEXT, (rtu.\"assigneeRefinement\"#>>'{lum:users,operator}'), (rtu.\"assigneeRefinement\"#>>'{lum:users,rightOperand}')) END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'userId', 'denialReqItemValue', ($4)::TEXT, 'deniedConstraint', rtu.\"assigneeRefinement\"#>'{lum:users}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"assigneeRefinement\"#>'{lum:users,rightOperand}') = 'null') ) ELSE NULL END AS \"denied_due_usersOnAssignee\", CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) AND NOT (CASE WHEN (rtu.\"usageConstraints\"#>'{count,rightOperand}') IS NULL OR (rtu.\"usageConstraints\"#>'{count,operator}') IS NULL THEN TRUE WHEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5)) IS NULL OR JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') = 'null' OR JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,operator}') <> 'string' THEN FALSE WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lum:in' THEN JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') = 'array' AND (rtu.\"usageConstraints\"#>'{count,rightOperand}') ? (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::TEXT WHEN JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') <> 'number' THEN FALSE WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lt' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER < (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'lteq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER <= (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'eq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER = (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'gteq' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER >= (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER WHEN (rtu.\"usageConstraints\"#>'{count,operator}')->>0 = 'gt' THEN (COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5))::INTEGER > (rtu.\"usageConstraints\"#>'{count,rightOperand}')::INTEGER ELSE FALSE END) THEN JSON_BUILD_OBJECT( 'denialCode', 'denied_due_usageCount', 'denialType', 'usageConstraint', 'denialReason', CASE WHEN JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') = 'null' THEN FORMAT('invalid constraint %s', (rtu.\"usageConstraints\"#>>'{count,leftOperand}')) ELSE FORMAT('exceeding the usage %s: (%s not %s %s)', (rtu.\"usageConstraints\"#>>'{count,leftOperand}'), COALESCE((usmcs.\"metrics\"#>'{count}')::INTEGER, 0) + ($5), (rtu.\"usageConstraints\"#>>'{count,operator}'), (rtu.\"usageConstraints\"#>>'{count,rightOperand}')) END || FORMAT(' on %s(%s) under agreement(%s) for action(%s)', rtu.\"assetUsageRuleType\", rtu.\"rightToUseId\", rtu.\"assetUsageAgreementId\", \"rtuAction\"), 'deniedAction', \"rtuAction\", 'deniedAssetUsageAgreementId', rtu.\"assetUsageAgreementId\", 'deniedAssetUsageAgreementRevision', agr.\"assetUsageAgreementRevision\", 'deniedRightToUseId', rtu.\"rightToUseId\", 'deniedRightToUseRevision', rtu.\"rightToUseRevision\", 'denialReqItemName', 'usageCount', 'denialReqItemValue', ($5), 'deniedConstraint', rtu.\"usageConstraints\"#>'{count}', 'deniedConstraintInvalid', (JSONB_TYPEOF(rtu.\"usageConstraints\"#>'{count,rightOperand}') = 'null'), 'deniedMetrics', COALESCE(usmcs.\"metrics\", '{\"count\":0}'::JSONB) ) ELSE NULL END AS \"denied_due_usageCount\" FROM (SELECT * FROM \"swidTag\" WHERE \"swTagId\" = ($1)) AS swid_tag JOIN \"rightToUse\" AS rtu ON (rtu.\"softwareLicensorId\" = swid_tag.\"softwareLicensorId\") JOIN \"assetUsageAgreement\" AS agr ON (rtu.\"softwareLicensorId\" = agr.\"softwareLicensorId\" AND rtu.\"assetUsageAgreementId\" = agr.\"assetUsageAgreementId\") CROSS JOIN LATERAL JSON_ARRAY_ELEMENTS_TEXT(ARRAY_TO_JSON(rtu.\"actions\")) AS \"rtuAction\" LEFT OUTER JOIN LATERAL (SELECT ums.* FROM \"usageMetrics\" AS ums WHERE ums.\"usageMetricsId\" = rtu.\"assetUsageRuleId\" AND ums.\"action\" = \"rtuAction\" AND ums.\"usageType\" = 'rightToUse') AS usmcs ON TRUE LEFT OUTER JOIN LATERAL (SELECT swt_ctlg.\"swCatalogIds\", swt_ctlg.\"swCatalogTypes\" FROM swt_ctlg WHERE swt_ctlg.\"swTagId\" = swid_tag.\"swTagId\") AS ctlgs ON TRUE WHERE \"rtuAction\" IN (($2),($3)) AND rtu.\"assetUsageRuleType\" != 'prohibition' ORDER BY CASE WHEN rtu.\"rightToUseActive\" = TRUE AND COALESCE(NOW()::DATE >= rtu.\"enableOn\", TRUE) AND COALESCE(NOW()::DATE <= rtu.\"expireOn\", TRUE) AND COALESCE(NOW() <= rtu.\"usageEnds\", TRUE) THEN '0' ELSE '1' END, NULLIF(\"rtuAction\", 'use') NULLS LAST, rtu.\"created\", rtu.\"assetUsageRuleId\" LIMIT 100",
            "sqlVals": [
                "unit-test-swTagId",
                "acumos:deploy",
                "use",
                "unit-test-userId",
                2
            ],
            "result": {
                "command": "SELECT",
                "rowCount": 1,
                "rows": [
                    {
                        "denied_due_rightToUseRevoked": null,
                        "denied_due_expireOn": null,
                        "denied_due_goodFor": {
                            "denialCode": "denied_due_goodFor",
                            "denialType": "timingConstraint",
                            "denialReason": "rightToUse too late: (now(2020-06-26T16:15:27.265Z) > end-of-good-for(2020-06-26T16:15:27.257Z)), usage started(2020-05-27T16:15:27.257Z), was good for(30 days) on permission(unit-test-permission-1) under agreement(unit-test-assetUsageAgreementId) for action(acumos:deploy)",
                            "deniedAction": "acumos:deploy",
                            "deniedAssetUsageAgreementId": "unit-test-assetUsageAgreementId",
                            "deniedAssetUsageAgreementRevision": 11,
                            "deniedRightToUseId": "unit-test-permission-1",
                            "deniedRightToUseRevision": 12,
                            "denialReqItemName": "datetime",
                            "denialReqItemValue": "2020-06-26T16:15:27.265Z",
                            "deniedConstraint": {
                                "leftOperand": "lum:goodFor",
                                "operator": "lteq",
                                "rightOperand": "P30D"
                            },
                            "deniedMetrics": {
                                "usageStarted": "2020-05-27T16:15:27.257Z",
                                "usageEnded": "2020-06-26T16:15:27.257Z"
                            }
                        },
                        "denied_due_enableOn": null,
                        "denied_due_swPersistentIdOnTarget": null,
                        "denied_due_swTagIdOnTarget": null,
                        "denied_due_swProductNameOnTarget": null,
                        "denied_due_swCategoryOnTarget": null,
                        "denied_due_swCatalogIdOnTarget": null,
                        "denied_due_swCatalogTypeOnTarget": null,
                        "denied_due_countUniqueUsersOnAssignee": null,
                        "denied_due_usersOnAssignee": null,
                        "denied_due_usageCount": null
                    }
                ]
            }
        },
        {
            "sqlCmd": "WITH asset_usage AS ( INSERT INTO \"assetUsage\" AS au (\"assetUsageId\" , \"isIncludedAsset\",\"modifier\" , \"creator\", \"assetUsageSeqTail\", \"assetUsageSeqTailEntitlement\", \"created\", \"modified\") VALUES (($1) , ($2),($3) , ($4), 1, 1, NOW(), NOW()) ON CONFLICT (\"assetUsageId\") DO UPDATE SET \"assetUsageSeqTail\" = au.\"assetUsageSeqTail\" + 1, \"assetUsageSeqTailEntitlement\" = au.\"assetUsageSeqTail\" + 1, \"modified\" = NOW() , \"isIncludedAsset\" = ($2),\"modifier\" = ($3) RETURNING \"assetUsageSeqTail\") INSERT INTO \"assetUsageHistory\" AS auh (\"assetUsageId\" , \"swMgtSystemId\",\"swMgtSystemInstanceId\",\"swMgtSystemComponent\",\"usageEntitled\",\"assetUsageReqId\",\"assetUsageType\",\"action\",\"swTagId\",\"softwareLicensorId\",\"swidTagRevision\",\"licenseProfileId\",\"licenseProfileRevision\",\"isRtuRequired\",\"isUsedBySwCreator\",\"assetUsageRuleId\",\"rightToUseRevision\",\"assetUsageAgreementId\",\"assetUsageAgreementRevision\",\"licenseKeys\",\"metrics\",\"assigneeMetrics\",\"usageMetricsId\",\"assetUsageDenialSummary\",\"assetUsageDenial\" , \"creator\", \"assetUsageSeq\", \"created\") SELECT ($1) , ($5),($6),($7),($8),($9),($10),($11),($12),($13),($14),($15),($16),($17),($18),($19),($20),($21),($22),($23),($24),($25),($26),($27),($28) , ($4), \"assetUsageSeqTail\", NOW() FROM asset_usage RETURNING auh.\"assetUsageSeq\"",
            "sqlVals": [
                "unit-test-assetUsageId",
                false,
                "unit-test-userId",
                "unit-test-userId",
                "unit-test-swMgtSystemId",
                "unit-test-swMgtSystemInstanceId",
                "unit-test-swMgtSystemComponent",
                false,
                "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
                "assetUsage",
                "acumos:deploy",
                "unit-test-swTagId",
                "unit-test-softwareLicensorId",
                5,
                "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                1,
                true,
                false,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "swid-tag(unit-test-swTagId) has been found and an asset-usage-agreement from unit-test-softwareLicensorId has been found but 1 constraint on the agreement(unit-test-assetUsageAgreementId) denies the usage of this asset",
                "[{\"denialCode\":\"denied_due_goodFor\",\"denialType\":\"timingConstraint\",\"denialReason\":\"rightToUse too late: (now(2020-06-26T16:15:27.265Z) > end-of-good-for(2020-06-26T16:15:27.257Z)), usage started(2020-05-27T16:15:27.257Z), was good for(30 days) on permission(unit-test-permission-1) under agreement(unit-test-assetUsageAgreementId) for action(acumos:deploy)\",\"deniedAction\":\"acumos:deploy\",\"deniedAssetUsageAgreementId\":\"unit-test-assetUsageAgreementId\",\"deniedAssetUsageAgreementRevision\":11,\"deniedRightToUseId\":\"unit-test-permission-1\",\"deniedRightToUseRevision\":12,\"denialReqItemName\":\"datetime\",\"denialReqItemValue\":\"2020-06-26T16:15:27.265Z\",\"deniedConstraint\":{\"leftOperand\":\"lum:goodFor\",\"operator\":\"lteq\",\"rightOperand\":\"P30D\"},\"deniedMetrics\":{\"usageStarted\":\"2020-05-27T16:15:27.257Z\",\"usageEnded\":\"2020-06-26T16:15:27.257Z\"}}]"
            ],
            "result": {
                "command": "INSERT",
                "rowCount": 1,
                "rows": [
                    {
                        "assetUsageSeq": 7
                    }
                ]
            }
        },
        {
            "sqlCmd": "WITH asset_usage AS ( INSERT INTO \"assetUsage\" AS au (\"assetUsageId\" , \"isIncludedAsset\",\"modifier\" , \"creator\", \"assetUsageSeqTail\", \"assetUsageSeqTailEntitlement\", \"created\", \"modified\") VALUES (($1) , ($2),($3) , ($4), 1, 1, NOW(), NOW()) ON CONFLICT (\"assetUsageId\") DO UPDATE SET \"assetUsageSeqTail\" = au.\"assetUsageSeqTail\" + 1, \"assetUsageSeqTailEntitlement\" = au.\"assetUsageSeqTail\" + 1, \"modified\" = NOW() , \"isIncludedAsset\" = ($2),\"modifier\" = ($3) RETURNING \"assetUsageSeqTail\") INSERT INTO \"assetUsageHistory\" AS auh (\"assetUsageId\" , \"swMgtSystemId\",\"swMgtSystemInstanceId\",\"swMgtSystemComponent\",\"usageEntitled\",\"assetUsageReqId\",\"assetUsageType\",\"action\",\"swTagId\",\"softwareLicensorId\",\"swidTagRevision\",\"licenseProfileId\",\"licenseProfileRevision\",\"isRtuRequired\",\"isUsedBySwCreator\",\"assetUsageRuleId\",\"rightToUseRevision\",\"assetUsageAgreementId\",\"assetUsageAgreementRevision\",\"licenseKeys\",\"metrics\",\"assigneeMetrics\",\"usageMetricsId\",\"assetUsageDenialSummary\",\"assetUsageDenial\" , \"creator\", \"assetUsageSeq\", \"created\") SELECT ($1) , ($5),($6),($7),($8),($9),($10),($11),($12),($13),($14),($15),($16),($17),($18),($19),($20),($21),($22),($23),($24),($25),($26),($27),($28) , ($4), \"assetUsageSeqTail\", NOW() FROM asset_usage RETURNING auh.\"assetUsageSeq\"",
            "sqlVals": [
                "unit-test-assetUsageId-2",
                true,
                "unit-test-userId",
                "unit-test-userId",
                "unit-test-swMgtSystemId",
                "unit-test-swMgtSystemInstanceId",
                "unit-test-swMgtSystemComponent",
                false,
                "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
                "assetUsage",
                "acumos:deploy",
                "unit-test-swTagId",
                "unit-test-softwareLicensorId",
                5,
                "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                1,
                true,
                false,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "swid-tag(unit-test-swTagId) has been found and an asset-usage-agreement from unit-test-softwareLicensorId has been found but 1 constraint on the agreement(unit-test-assetUsageAgreementId) denies the usage of this asset",
                "[{\"denialCode\":\"denied_due_goodFor\",\"denialType\":\"timingConstraint\",\"denialReason\":\"rightToUse too late: (now(2020-06-26T16:15:27.265Z) > end-of-good-for(2020-06-26T16:15:27.257Z)), usage started(2020-05-27T16:15:27.257Z), was good for(30 days) on permission(unit-test-permission-1) under agreement(unit-test-assetUsageAgreementId) for action(acumos:deploy)\",\"deniedAction\":\"acumos:deploy\",\"deniedAssetUsageAgreementId\":\"unit-test-assetUsageAgreementId\",\"deniedAssetUsageAgreementRevision\":11,\"deniedRightToUseId\":\"unit-test-permission-1\",\"deniedRightToUseRevision\":12,\"denialReqItemName\":\"datetime\",\"denialReqItemValue\":\"2020-06-26T16:15:27.265Z\",\"deniedConstraint\":{\"leftOperand\":\"lum:goodFor\",\"operator\":\"lteq\",\"rightOperand\":\"P30D\"},\"deniedMetrics\":{\"usageStarted\":\"2020-05-27T16:15:27.257Z\",\"usageEnded\":\"2020-06-26T16:15:27.257Z\"}}]"
            ],
            "result": {
                "command": "INSERT",
                "rowCount": 1,
                "rows": [
                    {
                        "assetUsageSeq": 6
                    }
                ]
            }
        },
        {
            "sqlCmd": "INSERT INTO \"includedAssetUsage\" (\"assetUsageId\", \"includedAssetUsageId\" , \"creator\",\"creatorRequestId\") SELECT ($1), UNNEST(ARRAY[($2)]) , ($3),($4) ON CONFLICT (\"assetUsageId\", \"includedAssetUsageId\") DO NOTHING",
            "sqlVals": [
                "unit-test-assetUsageId",
                "unit-test-assetUsageId-2",
                "unit-test-userId",
                "126573fe-cfc7-41d1-953e-6e14b3eae2d1"
            ],
            "result": {
                "command": "INSERT",
                "rowCount": 0,
                "rows": []
            }
        },
        {
            "sqlCmd": "UPDATE \"assetUsageReq\" AS aur SET \"requestDone\" = TRUE, \"responseSent\" = CLOCK_TIMESTAMP() , \"responseHttpCode\" = ($2),\"response\" = ($3),\"usageEntitled\" = ($4),\"status\" = ($5) WHERE aur.\"assetUsageReqId\" = ($1)",
            "sqlVals": [
                "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
                402,
                {
                    "userId": "unit-test-userId",
                    "swMgtSystemId": "unit-test-swMgtSystemId",
                    "swMgtSystemInstanceId": "unit-test-swMgtSystemInstanceId",
                    "swMgtSystemComponent": "unit-test-swMgtSystemComponent",
                    "requestId": "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
                    "requested": "2020-06-26T16:15:27.263Z",
                    "usageEntitled": false,
                    "assetUsage": {
                        "swTagId": "unit-test-swTagId",
                        "assetUsageId": "unit-test-assetUsageId",
                        "action": "acumos:deploy",
                        "usageEntitled": false,
                        "isUsedBySwCreator": false,
                        "assetUsageSeq": 7,
                        "swidTagRevision": 5,
                        "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                        "licenseProfileRevision": 1,
                        "isRtuRequired": true,
                        "softwareLicensorId": "unit-test-softwareLicensorId",
                        "assetUsageDenialSummary": "swid-tag(unit-test-swTagId) has been found and an asset-usage-agreement from unit-test-softwareLicensorId has been found but 1 constraint on the agreement(unit-test-assetUsageAgreementId) denies the usage of this asset",
                        "assetUsageDenial": [
                            {
                                "denialCode": "denied_due_goodFor",
                                "denialType": "timingConstraint",
                                "denialReason": "rightToUse too late: (now(2020-06-26T16:15:27.265Z) > end-of-good-for(2020-06-26T16:15:27.257Z)), usage started(2020-05-27T16:15:27.257Z), was good for(30 days) on permission(unit-test-permission-1) under agreement(unit-test-assetUsageAgreementId) for action(acumos:deploy)",
                                "deniedAction": "acumos:deploy",
                                "deniedAssetUsageAgreementId": "unit-test-assetUsageAgreementId",
                                "deniedAssetUsageAgreementRevision": 11,
                                "deniedRightToUseId": "unit-test-permission-1",
                                "deniedRightToUseRevision": 12,
                                "denialReqItemName": "datetime",
                                "denialReqItemValue": "2020-06-26T16:15:27.265Z",
                                "deniedConstraint": {
                                    "leftOperand": "lum:goodFor",
                                    "operator": "lteq",
                                    "rightOperand": "P30D"
                                },
                                "deniedMetrics": {
                                    "usageStarted": "2020-05-27T16:15:27.257Z",
                                    "usageEnded": "2020-06-26T16:15:27.257Z"
                                }
                            }
                        ],
                        "includedAssetUsage": [
                            {
                                "includedSwTagId": "unit-test-swTagId",
                                "includedAssetUsageId": "unit-test-assetUsageId-2",
                                "usageEntitled": false,
                                "isUsedBySwCreator": false,
                                "assetUsageSeq": 6,
                                "swidTagRevision": 5,
                                "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                                "licenseProfileRevision": 1,
                                "isRtuRequired": true,
                                "softwareLicensorId": "unit-test-softwareLicensorId",
                                "assetUsageDenialSummary": "swid-tag(unit-test-swTagId) has been found and an asset-usage-agreement from unit-test-softwareLicensorId has been found but 1 constraint on the agreement(unit-test-assetUsageAgreementId) denies the usage of this asset",
                                "assetUsageDenial": [
                                    {
                                        "denialCode": "denied_due_goodFor",
                                        "denialType": "timingConstraint",
                                        "denialReason": "rightToUse too late: (now(2020-06-26T16:15:27.265Z) > end-of-good-for(2020-06-26T16:15:27.257Z)), usage started(2020-05-27T16:15:27.257Z), was good for(30 days) on permission(unit-test-permission-1) under agreement(unit-test-assetUsageAgreementId) for action(acumos:deploy)",
                                        "deniedAction": "acumos:deploy",
                                        "deniedAssetUsageAgreementId": "unit-test-assetUsageAgreementId",
                                        "deniedAssetUsageAgreementRevision": 11,
                                        "deniedRightToUseId": "unit-test-permission-1",
                                        "deniedRightToUseRevision": 12,
                                        "denialReqItemName": "datetime",
                                        "denialReqItemValue": "2020-06-26T16:15:27.265Z",
                                        "deniedConstraint": {
                                            "leftOperand": "lum:goodFor",
                                            "operator": "lteq",
                                            "rightOperand": "P30D"
                                        },
                                        "deniedMetrics": {
                                            "usageStarted": "2020-05-27T16:15:27.257Z",
                                            "usageEnded": "2020-06-26T16:15:27.257Z"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                },
                false,
                "responseSent"
            ],
            "result": {
                "command": "UPDATE",
                "rowCount": 1,
                "rows": []
            }
        },
        {
            "sqlCmd": "COMMIT",
            "result": {
                "command": "COMMIT",
                "rowCount": 1,
                "rows": []
            }
        }
    ],
    "req": {
        "method": "PUT",
        "path": "/api/v1/asset-usage?assetUsageId=unit-test-assetUsageId",
        "content-type": "application/json; charset=utf-8",
        "X-ACUMOS-RequestID": "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
        "send": {
            "requestId": "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
            "requested": "2020-06-26T16:15:27.263Z",
            "userId": "unit-test-userId",
            "swMgtSystemId": "unit-test-swMgtSystemId",
            "swMgtSystemInstanceId": "unit-test-swMgtSystemInstanceId",
            "swMgtSystemComponent": "unit-test-swMgtSystemComponent",
            "assetUsageReq": {
                "swTagId": "unit-test-swTagId",
                "assetUsageId": "unit-test-assetUsageId",
                "action": "acumos:deploy",
                "isIncludedAsset": false,
                "includedAssetUsage": [
                    {
                        "includedSwTagId": "unit-test-swTagId",
                        "includedAssetUsageId": "unit-test-assetUsageId-2"
                    }
                ]
            }
        }
    },
    "res": {
        "statusCode": 402,
        "body": {
            "userId": "unit-test-userId",
            "swMgtSystemId": "unit-test-swMgtSystemId",
            "swMgtSystemInstanceId": "unit-test-swMgtSystemInstanceId",
            "swMgtSystemComponent": "unit-test-swMgtSystemComponent",
            "requestId": "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
            "requested": "__type__dateTime__",
            "usageEntitled": false,
            "assetUsage": {
                "swTagId": "unit-test-swTagId",
                "assetUsageId": "unit-test-assetUsageId",
                "action": "acumos:deploy",
                "usageEntitled": false,
                "isUsedBySwCreator": false,
                "assetUsageSeq": 7,
                "swidTagRevision": 5,
                "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                "licenseProfileRevision": 1,
                "isRtuRequired": true,
                "softwareLicensorId": "unit-test-softwareLicensorId",
                "assetUsageDenialSummary": "swid-tag(unit-test-swTagId) has been found and an asset-usage-agreement from unit-test-softwareLicensorId has been found but 1 constraint on the agreement(unit-test-assetUsageAgreementId) denies the usage of this asset",
                "assetUsageDenial": [
                    {
                        "denialCode": "denied_due_goodFor",
                        "denialType": "timingConstraint",
                        "denialReason": "__type__ignore__",
                        "deniedAction": "acumos:deploy",
                        "deniedAssetUsageAgreementId": "unit-test-assetUsageAgreementId",
                        "deniedAssetUsageAgreementRevision": 11,
                        "deniedRightToUseId": "unit-test-permission-1",
                        "deniedRightToUseRevision": 12,
                        "denialReqItemName": "datetime",
                        "denialReqItemValue": "__type__dateTime__",
                        "deniedConstraint": {
                            "leftOperand": "lum:goodFor",
                            "operator": "lteq",
                            "rightOperand": "P30D"
                        },
                        "deniedMetrics": {
                            "usageStarted": "__type__dateTime__",
                            "usageEnded": "__type__dateTime__"
                        }
                    }
                ],
                "includedAssetUsage": [
                    {
                        "includedSwTagId": "unit-test-swTagId",
                        "includedAssetUsageId": "unit-test-assetUsageId-2",
                        "usageEntitled": false,
                        "isUsedBySwCreator": false,
                        "assetUsageSeq": 6,
                        "swidTagRevision": 5,
                        "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                        "licenseProfileRevision": 1,
                        "isRtuRequired": true,
                        "softwareLicensorId": "unit-test-softwareLicensorId",
                        "assetUsageDenialSummary": "swid-tag(unit-test-swTagId) has been found and an asset-usage-agreement from unit-test-softwareLicensorId has been found but 1 constraint on the agreement(unit-test-assetUsageAgreementId) denies the usage of this asset",
                        "assetUsageDenial": [
                            {
                                "denialCode": "denied_due_goodFor",
                                "denialType": "timingConstraint",
                                "denialReason": "__type__ignore__",
                                "deniedAction": "acumos:deploy",
                                "deniedAssetUsageAgreementId": "unit-test-assetUsageAgreementId",
                                "deniedAssetUsageAgreementRevision": 11,
                                "deniedRightToUseId": "unit-test-permission-1",
                                "deniedRightToUseRevision": 12,
                                "denialReqItemName": "datetime",
                                "denialReqItemValue": "__type__dateTime__",
                                "deniedConstraint": {
                                    "leftOperand": "lum:goodFor",
                                    "operator": "lteq",
                                    "rightOperand": "P30D"
                                },
                                "deniedMetrics": {
                                    "usageStarted": "__type__dateTime__",
                                    "usageEnded": "__type__dateTime__"
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    "acuLogs": [
        {
            "LogTimestamp": "__type__dateTime__",
            "RequestID": "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
            "InvocationID": "PUT /api/v1/asset-usage",
            "InstanceID": "__type__uuid__",
            "Thread": "main",
            "ServiceName": "lum-server/api/v1/asset-usage",
            "Partnername": "__type__ignore__",
            "StatusCode": "INPROGRESS",
            "ResponseCode": null,
            "ResponseDescription": null,
            "Level": "DEBUG",
            "Severity": "INFO",
            "ServerFQDN": "__type__ignore__",
            "ClientIPAddress": "__type__ignore__",
            "TargetEntity": null,
            "TargetServiceName": null,
            "User": "unit-test-userId",
            "Logger": "__type__ignore__",
            "Mdc": null,
            "Message": {
                "userId": "unit-test-userId",
                "swMgtSystemId": "unit-test-swMgtSystemId",
                "swMgtSystemInstanceId": "unit-test-swMgtSystemInstanceId",
                "swMgtSystemComponent": "unit-test-swMgtSystemComponent",
                "assetUsageReq": {
                    "swTagId": "unit-test-swTagId",
                    "assetUsageId": "unit-test-assetUsageId",
                    "action": "acumos:deploy",
                    "isIncludedAsset": false,
                    "includedAssetUsage": [
                        {
                            "includedSwTagId": "unit-test-swTagId",
                            "includedAssetUsageId": "unit-test-assetUsageId-2"
                        }
                    ]
                },
                "requested": "__type__dateTime__"
            },
            "Marker": "ENTRY"
        },
        {
            "LogTimestamp": "__type__dateTime__",
            "RequestID": "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
            "InvocationID": "response",
            "InstanceID": "__type__uuid__",
            "Thread": "main",
            "ServiceName": "lum-server/api/v1/asset-usage",
            "Partnername": "__type__ignore__",
            "StatusCode": "COMPLETE",
            "ResponseCode": 402,
            "ResponseDescription": "Denied",
            "Level": "DEBUG",
            "Severity": "INFO",
            "ServerFQDN": "__type__ignore__",
            "ClientIPAddress": "__type__ignore__",
            "TargetEntity": null,
            "TargetServiceName": null,
            "User": "unit-test-userId",
            "Logger": "__type__ignore__",
            "Mdc": null,
            "Message": {
                "requestId": "126573fe-cfc7-41d1-953e-6e14b3eae2d1",
                "requested": "2020-06-26T16:15:27.263Z",
                "userId": "unit-test-userId",
                "swMgtSystemId": "unit-test-swMgtSystemId",
                "swMgtSystemInstanceId": "unit-test-swMgtSystemInstanceId",
                "swMgtSystemComponent": "unit-test-swMgtSystemComponent",
                "usageEntitled": false,
                "assetUsage": {
                    "swTagId": "unit-test-swTagId",
                    "assetUsageId": "unit-test-assetUsageId",
                    "action": "acumos:deploy",
                    "usageEntitled": false,
                    "isUsedBySwCreator": false,
                    "assetUsageSeq": 7,
                    "swidTagRevision": 5,
                    "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                    "licenseProfileRevision": 1,
                    "isRtuRequired": true,
                    "softwareLicensorId": "unit-test-softwareLicensorId",
                    "assetUsageDenialSummary": "swid-tag(unit-test-swTagId) has been found and an asset-usage-agreement from unit-test-softwareLicensorId has been found but 1 constraint on the agreement(unit-test-assetUsageAgreementId) denies the usage of this asset",
                    "assetUsageDenial": [
                        {
                            "denialCode": "denied_due_goodFor",
                            "denialType": "timingConstraint",
                            "denialReason": "rightToUse too late: (now(2020-06-26T16:15:27.265Z) > end-of-good-for(2020-06-26T16:15:27.257Z)), usage started(2020-05-27T16:15:27.257Z), was good for(30 days) on permission(unit-test-permission-1) under agreement(unit-test-assetUsageAgreementId) for action(acumos:deploy)",
                            "deniedAction": "acumos:deploy",
                            "deniedAssetUsageAgreementId": "unit-test-assetUsageAgreementId",
                            "deniedAssetUsageAgreementRevision": 11,
                            "deniedRightToUseId": "unit-test-permission-1",
                            "deniedRightToUseRevision": 12,
                            "denialReqItemName": "datetime",
                            "denialReqItemValue": "2020-06-26T16:15:27.265Z",
                            "deniedConstraint": {
                                "leftOperand": "lum:goodFor",
                                "operator": "lteq",
                                "rightOperand": "P30D"
                            },
                            "deniedMetrics": {
                                "usageStarted": "2020-05-27T16:15:27.257Z",
                                "usageEnded": "2020-06-26T16:15:27.257Z"
                            }
                        }
                    ],
                    "includedAssetUsage": [
                        {
                            "includedSwTagId": "unit-test-swTagId",
                            "includedAssetUsageId": "unit-test-assetUsageId-2",
                            "usageEntitled": false,
                            "isUsedBySwCreator": false,
                            "assetUsageSeq": 6,
                            "swidTagRevision": 5,
                            "licenseProfileId": "cec51e7d-d977-41d2-abc6-ef5f069491b8",
                            "licenseProfileRevision": 1,
                            "isRtuRequired": true,
                            "softwareLicensorId": "unit-test-softwareLicensorId",
                            "assetUsageDenialSummary": "swid-tag(unit-test-swTagId) has been found and an asset-usage-agreement from unit-test-softwareLicensorId has been found but 1 constraint on the agreement(unit-test-assetUsageAgreementId) denies the usage of this asset",
                            "assetUsageDenial": [
                                {
                                    "denialCode": "denied_due_goodFor",
                                    "denialType": "timingConstraint",
                                    "denialReason": "rightToUse too late: (now(2020-06-26T16:15:27.265Z) > end-of-good-for(2020-06-26T16:15:27.257Z)), usage started(2020-05-27T16:15:27.257Z), was good for(30 days) on permission(unit-test-permission-1) under agreement(unit-test-assetUsageAgreementId) for action(acumos:deploy)",
                                    "deniedAction": "acumos:deploy",
                                    "deniedAssetUsageAgreementId": "unit-test-assetUsageAgreementId",
                                    "deniedAssetUsageAgreementRevision": 11,
                                    "deniedRightToUseId": "unit-test-permission-1",
                                    "deniedRightToUseRevision": 12,
                                    "denialReqItemName": "datetime",
                                    "denialReqItemValue": "2020-06-26T16:15:27.265Z",
                                    "deniedConstraint": {
                                        "leftOperand": "lum:goodFor",
                                        "operator": "lteq",
                                        "rightOperand": "P30D"
                                    },
                                    "deniedMetrics": {
                                        "usageStarted": "2020-05-27T16:15:27.257Z",
                                        "usageEnded": "2020-06-26T16:15:27.257Z"
                                    }
                                }
                            ]
                        }
                    ]
                }
            },
            "Marker": "EXIT"
        }
    ]
}